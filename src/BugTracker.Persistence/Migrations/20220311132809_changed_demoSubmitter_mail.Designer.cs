// <auto-generated />
using System;
using BugTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220311132809_changed_demoSubmitter_mail")]
    partial class changed_demoSubmitter_mail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Domain.Common.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61d3262e-bb37-41f8-90ea-62f1b179f3e6"),
                            Name = "Low",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("7d539a43-f620-4cdb-ae55-c4ceccc66e20"),
                            Name = "Medium",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("8025d5df-4493-408d-91a3-a17bac41012c"),
                            Name = "High",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("b6d61d0c-e311-4ec7-a211-bb8ff1c147fb"),
                            Name = "Immediate",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9ff29a1-c446-4962-8dc0-503e5a68ed68"),
                            Name = "New",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("2d9224ae-9754-4528-adb8-a72701c3edf8"),
                            Name = "Open",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("9443d4ce-12e1-4560-8359-a3b168d83c65"),
                            Name = "In progress",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("68644a1d-8680-460f-852d-27d8513a288f"),
                            Name = "Resolved",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedAmountOfHours")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d72624d7-f93b-4587-80c3-ced5c4886ca0"),
                            Name = "Bug - Error",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("f397f3a8-4e92-4c1a-885f-194f6ac4d537"),
                            Name = "Feature request",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("d0182d0d-1b6c-4985-85c6-2af672fb1f53"),
                            Name = "Training",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("c611424a-e97d-40e7-b497-e3bb9436f1d4"),
                            Name = "Documentation",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ae7fffe3-84fe-44f6-ac9f-287b8529f00f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adc3cd2d-0467-4fcd-8285-dd60abfa4f6b",
                            Email = "DemoAdmin@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOADMIN@ADMIN.COM",
                            NormalizedUserName = "DEMO ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMeZ1sKqPHnoJH1FGXqV2HxyhVESOU3trzATglRtR7yQa4D0FphjleHWztB8K1gxbA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Admin"
                        },
                        new
                        {
                            Id = "be2ae4ba-1a43-4271-a6a9-14b3b7923f28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ce8840d-129a-4cb3-939e-3de41b72fe79",
                            Email = "DemoDev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMODEV@GMAIL.COM",
                            NormalizedUserName = "DEMO DEVELOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEL3QNCCyLdxzGobWZyA4iwq+6+LwG3/G723wYKHr5IC3C/bhScfU7MpsANfdr3mEg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo developer"
                        },
                        new
                        {
                            Id = "980c3882-9373-474d-b9e0-f25d7c00d67e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e551b929-69fd-4745-89e3-2e0c8692d29f",
                            Email = "demoSubmitter@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "DEMO SUBMITTER",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGqZX8BMOYKxXV44tMyqhNMmxkOC8OX1YMRqdF786FQLmO16MPJ+fwGCQIxdJD89A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo submitter"
                        },
                        new
                        {
                            Id = "b7435362-bc74-4a5a-a215-700a8a2760f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ae8fed7-35bf-4476-acdb-622fdc35f0de",
                            Email = "demoPM@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOPM@GMAIL.COM",
                            NormalizedUserName = "DEMO PROJECT MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMsa71p5UZWL/YQcQO6B/z7h9IH71xzUShphUYDgL6SgBrhnFgXbiw5wrNJ88WfXw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Project Manager"
                        },
                        new
                        {
                            Id = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0093b57b-0c83-4aad-8615-f54312a449eb",
                            Email = "quentin.coui@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QUENTIN.COUI@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPuk2Da6GQbKNHNFOdzEJUfZC7efCV6zBYrWPhbYaGID7g/27Ugxdv9bTi7kqP2hcw==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23b5cd20-cae9-413e-9350-bbce122f44b7",
                            Email = "john.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JOHN DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEN4X0MwTaGRSwHrxFIFrWpI7IbGzgPOP15kB66JAfarTN7a88R8meBwJRoPZSu7F/w==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "John doe"
                        },
                        new
                        {
                            Id = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99f4c451-40cc-42dd-bf73-254f33a48263",
                            Email = "jane.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JANE DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAECthXF++XGNLF5caf97J5zwxuD/xrYeYOyYIBHid73QgJWfwrvknsht917u6utgT5Q==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jane doe"
                        },
                        new
                        {
                            Id = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa892774-d8dd-49a6-a7ec-1e3c925becb9",
                            Email = "jack.nicklefrost@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.NICKLEFROST@HOTMAIL.COM",
                            NormalizedUserName = "JACK NICKEFROST",
                            PasswordHash = "AQAAAAEAACcQAAAAEPm4LxPmldL7QBAKr4wpwrX2l+CgpnYYHiYz5G/mJd/uYhwVg2jnDaqgtd5khwESzw==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jack nicklefrost"
                        },
                        new
                        {
                            Id = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9b948c7-5d26-4207-8d90-5365a2067052",
                            Email = "hanna.steinbeck@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANNA.STEINBECK@HOTMAIL.COM",
                            NormalizedUserName = "HANNA STEINBECK",
                            PasswordHash = "AQAAAAEAACcQAAAAENRG/T8UnNnPrNjY54Papa5CrUJKicKjLgUg7HQzwnb4+eWbfgX3F/rd1OcIortYZA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Hanna steinbeck"
                        },
                        new
                        {
                            Id = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ad0ece4-bea9-49d8-8b3e-e45ecafbbe18",
                            Email = "alice.cooper@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.COOPER@HOTMAIL.COM",
                            NormalizedUserName = "ALICE COOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBv5IYVBV50pivQL21RRw45tbGAOjod6lf40KclHdY5fQIq6S3iaZWe50nPjKJOldg==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Alice cooper"
                        },
                        new
                        {
                            Id = "df656ced-7b29-4504-baeb-60d628c56739",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1c3c252-bed6-4e0c-b4aa-d3d52b03d145",
                            Email = "dean.moriarty@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEAN.MORIARTY@HOTMAIL.COM",
                            NormalizedUserName = "DEAN MORIARTY",
                            PasswordHash = "AQAAAAEAACcQAAAAEOgeCkTxj+dEb6w24Nu9Dl3nbjm1z5/Jz/2ktgJHH4dWnjMgMA/FT4U/c4m+A7vi0w==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Dean Moriarty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65",
                            ConcurrencyStamp = "8b47da6e-d4a9-49a8-9b57-9db4d70b1ddb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6e8006e3-e50a-49be-94ea-03ab653713cc",
                            ConcurrencyStamp = "cad4bb08-4d3f-4109-b07e-1f1a6600a4a7",
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "04614fbc-b0b7-4344-a2e9-8046742ac7cb",
                            ConcurrencyStamp = "385dcb9c-b242-43ed-8ebf-8300f6dbfc56",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "6cdee224-4d18-482a-b084-e54fa1788095",
                            ConcurrencyStamp = "b5b73189-b935-4b8f-a0c7-e5f8bdebf2fa",
                            Name = "Submitter",
                            NormalizedName = "SUBMITTER"
                        },
                        new
                        {
                            Id = "5eb35880-6e69-451c-bedc-bd863f6b80f6",
                            ConcurrencyStamp = "ee4d7382-60a3-4d34-9f38-7ac1f491b8cd",
                            Name = "Demo Admin",
                            NormalizedName = "DEMO_ADMIN"
                        },
                        new
                        {
                            Id = "776a748a-cd98-42e8-afdb-ae578902a099",
                            ConcurrencyStamp = "8ae4e0ee-9b67-429f-9c15-0939632dcad2",
                            Name = " Demo Project Manager",
                            NormalizedName = "DEMO PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "bc03a370-240d-48a6-a37b-efe518b3f065",
                            ConcurrencyStamp = "48dda377-a5ce-4ee3-bf36-0a47b9d76bee",
                            Name = "Demo Developer",
                            NormalizedName = "DEMO DEVELOPER"
                        },
                        new
                        {
                            Id = "96095b44-8c4a-4786-93d3-ee82b5b29481",
                            ConcurrencyStamp = "90e76ad8-808f-42fa-b6fd-48baa05c9533",
                            Name = "Demo Submitter",
                            NormalizedName = "DEMO SUBMITTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            RoleId = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65"
                        },
                        new
                        {
                            UserId = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        },
                        new
                        {
                            UserId = "df656ced-7b29-4504-baeb-60d628c56739",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        },
                        new
                        {
                            UserId = "ae7fffe3-84fe-44f6-ac9f-287b8529f00f",
                            RoleId = "5eb35880-6e69-451c-bedc-bd863f6b80f6"
                        },
                        new
                        {
                            UserId = "be2ae4ba-1a43-4271-a6a9-14b3b7923f28",
                            RoleId = "bc03a370-240d-48a6-a37b-efe518b3f065"
                        },
                        new
                        {
                            UserId = "b7435362-bc74-4a5a-a215-700a8a2760f3",
                            RoleId = "776a748a-cd98-42e8-afdb-ae578902a099"
                        },
                        new
                        {
                            UserId = "980c3882-9373-474d-b9e0-f25d7c00d67e",
                            RoleId = "96095b44-8c4a-4786-93d3-ee82b5b29481"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BugTracker.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ProjectTeamMembers");

                    b.Navigation("Tickets");

                    b.Navigation("TicketsTeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
