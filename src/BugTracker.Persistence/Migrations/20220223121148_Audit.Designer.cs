// <auto-generated />
using System;
using BugTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220223121148_Audit")]
    partial class Audit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Domain.Common.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19138e08-9f5f-4580-b2ea-f47f0f7ab05a"),
                            Name = "Low",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("a617edf6-d9f3-465e-94a7-cba2d7ba1930"),
                            Name = "Medium",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("a5e2901f-f013-4d76-9b48-f0d2ed83a325"),
                            Name = "High",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("7e1304d6-9683-406c-b231-f4f488cf57ad"),
                            Name = "Immediate",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5606306-7321-4383-b7e0-b297653a139f"),
                            Name = "New",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("841874c0-60eb-4f98-ba2d-876ef6c8af11"),
                            Name = "Open",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("84a09be8-47c2-4957-a47d-abb382a45c8f"),
                            Name = "In progress",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("eeb4ef16-df71-4197-9ae7-cc628dafbf9f"),
                            Name = "Resolved",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedAmountOfHours")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = new Guid("baee1998-1e46-4ced-b34c-41c2451fe8fe"),
                            Name = "Bug - Error",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("3994434c-1b48-4062-b662-8c5ad95d10cf"),
                            Name = "Feature request",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("181f641d-aeca-4577-b6fa-15da60a8c74a"),
                            Name = "Training",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("31c30e19-e66e-4239-ae85-908919ee6b66"),
                            Name = "Documentation",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d51a9dba-f688-4311-9601-fbcdc4d02322",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e32febf7-a770-4828-8843-599c715ac949",
                            Email = "DemoAdmin@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOADMIN@ADMIN.COM",
                            NormalizedUserName = "DEMO ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHL3feTGxy9lg2NnWz6TcJ30pZWY7isdjs/xjX9UV0HJvPKSfViVbBPzcXMS1Vd04g==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Admin"
                        },
                        new
                        {
                            Id = "3215f23e-d9a2-4bc7-b61a-8fdda12617a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bedc3a31-d30e-459a-84e1-79943edbf281",
                            Email = "DemoDev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMODEV@GMAIL.COM",
                            NormalizedUserName = "DEMO DEVELOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfUN4VvahggNnLlC1+JbdjcLZX337tw/K8dSKwyxaRhRzHRfHO1sikeUZfQJHvoUA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo developer"
                        },
                        new
                        {
                            Id = "81e4802f-6387-4e7d-9c40-27a0de3bf497",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07725bba-49e0-4897-8ce1-5e809700a63a",
                            Email = "john@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "DEMO SUBMITTER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKX3gngUY6TQHbSzSBg38eFSfM97PUqEqHLrmf644u3I3pYt09dbtdnkWSNtXypF+g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo submitter"
                        },
                        new
                        {
                            Id = "872e392a-8224-4517-8097-98934f728b50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdef8f44-6f8e-45c9-8bdc-7c73c411f66c",
                            Email = "demoPM@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOPM@GMAIL.COM",
                            NormalizedUserName = "DEMO PROJECT MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAECFO28gYkPRRfLNyVb5ijqBb3bhL9cfXoud7mwhntonP9URwU+/fmz6PFhJ3ZlU51A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Project Manager"
                        },
                        new
                        {
                            Id = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9f9b827-5137-40cc-865e-a619cc2de520",
                            Email = "quentin.coui@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QUENTIN.COUI@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEyFBJHseLZLtqfTmxw5f981DimDubG4FxgiuMJyvG9oX+bJ8hYzydLq4AMCNCeXpw==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d29dd488-5f98-4e1f-ac44-396b20217b1d",
                            Email = "john.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JOHN DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOZBbAmhWzouNRL8GQEBGvSV6jh8a09XG+Tm0e0uqEEjFUu1yCvkZuOuO0grpvQslA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "John doe"
                        },
                        new
                        {
                            Id = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a6fe52d-dc42-43fc-92d5-217a01139206",
                            Email = "jane.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JANE DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoRRrzU/N6fEc+oImZyRzxwFjNt0LmXH3abN6z0DKNA0fS96ewOK7ZIua4hoo3QhA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jane doe"
                        },
                        new
                        {
                            Id = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09762229-9138-4415-bef9-2c69790200ce",
                            Email = "jack.nicklefrost@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.NICKLEFROST@HOTMAIL.COM",
                            NormalizedUserName = "JACK NICKEFROST",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLC5a8ULshR55ConkdVmP7Aq6tTkUsuDsSC2A/+qCHWm2Ll8VfZOK1f7/8P2XEjqA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jack nicklefrost"
                        },
                        new
                        {
                            Id = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b047f2cb-b490-4449-9301-5a421ac87abe",
                            Email = "hanna.steinbeck@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANNA.STEINBECK@HOTMAIL.COM",
                            NormalizedUserName = "HANNA STEINBECK",
                            PasswordHash = "AQAAAAEAACcQAAAAEBeale0aaW8OYS/6F9CzsedYgbPxFXAvNYHT/A7bwa3kBKHilshlDf5kVUxuO9ON1g==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Hanna steinbeck"
                        },
                        new
                        {
                            Id = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e693aced-66ae-40fd-967e-12dc1c7d5cda",
                            Email = "alice.cooper@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.COOPER@HOTMAIL.COM",
                            NormalizedUserName = "ALICE COOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPgBVudrTqRRx7rWnXgMq4T/vyVB97vezywzUl8c1L/pEChAfDlsaYGojhjszEUoWg==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Alice cooper"
                        },
                        new
                        {
                            Id = "df656ced-7b29-4504-baeb-60d628c56739",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "363b40a6-0e6a-4d81-8ff2-9810c079133d",
                            Email = "dean.moriarty@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEAN.MORIARTY@HOTMAIL.COM",
                            NormalizedUserName = "DEAN MORIARTY",
                            PasswordHash = "AQAAAAEAACcQAAAAEE4eXtzxmx5BIgeTIT1BK0OvOJ88Ikg+ng23LEahl+Ypr8KhjtDgJLJqQkKWeAsJ/Q==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Dean Moriarty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65",
                            ConcurrencyStamp = "1823aea1-b0ed-47a3-9010-d2ac40f3f28e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6e8006e3-e50a-49be-94ea-03ab653713cc",
                            ConcurrencyStamp = "6c3a15ed-b5a1-42b8-9161-b5c12b311baf",
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "04614fbc-b0b7-4344-a2e9-8046742ac7cb",
                            ConcurrencyStamp = "2a892ad0-e37b-4548-a8d9-4c29e41afb85",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "6cdee224-4d18-482a-b084-e54fa1788095",
                            ConcurrencyStamp = "78c303c1-3867-4257-8b2e-30db9b541626",
                            Name = "Submitter",
                            NormalizedName = "SUBMITTER"
                        },
                        new
                        {
                            Id = "35319cea-39ff-4aed-9a4b-b9064e49a553",
                            ConcurrencyStamp = "810cd788-4a42-4973-a147-f552b8819e19",
                            Name = "Demo Admin",
                            NormalizedName = "DEMO_ADMIN"
                        },
                        new
                        {
                            Id = "19292550-9163-49fb-a72c-b991b7d432a9",
                            ConcurrencyStamp = "354ec10c-9c53-49df-8831-2c3b3791d71a",
                            Name = " Demo Project Manager",
                            NormalizedName = "DEMO PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "5dc6271e-1b91-421e-b4c8-230e3ca30bbb",
                            ConcurrencyStamp = "4494c4f0-3479-439d-b012-8b69ef7418f0",
                            Name = "Demo Developer",
                            NormalizedName = "DEMO DEVELOPER"
                        },
                        new
                        {
                            Id = "ed43023b-7bcc-44ae-82d6-4914f35ea94d",
                            ConcurrencyStamp = "3dcfa60f-77cf-4f3d-8bef-515680c55cc7",
                            Name = "Demo Submitter",
                            NormalizedName = "DEMO SUBMITTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            RoleId = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65"
                        },
                        new
                        {
                            UserId = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        },
                        new
                        {
                            UserId = "df656ced-7b29-4504-baeb-60d628c56739",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BugTracker.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ProjectTeamMembers");

                    b.Navigation("Tickets");

                    b.Navigation("TicketsTeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
