// <auto-generated />
using System;
using BugTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220228113817_updateComments")]
    partial class updateComments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Domain.Common.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0fe08bf-8a8d-463b-8f45-2ceed0ac071d"),
                            Name = "Low",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("b3d753bd-85de-4642-8ace-62d9237bbd37"),
                            Name = "Medium",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("ef6d7f9e-7a3b-42a1-a495-29f2b635a3df"),
                            Name = "High",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("9ba61ced-7a7c-4aa6-9ffb-56387a610e49"),
                            Name = "Immediate",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e554cf2-b56b-4574-bcad-30b4a6e7a556"),
                            Name = "New",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("43cd8763-5fd6-460f-bff5-f4e7592f79e5"),
                            Name = "Open",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("1fa3568f-cb42-4e30-86aa-52fe96b63d86"),
                            Name = "In progress",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("7495033f-f823-4ec9-a59f-e68aa0404a28"),
                            Name = "Resolved",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedAmountOfHours")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce371b6e-8ba8-48b9-b6fa-b933d41774a1"),
                            Name = "Bug - Error",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("e91e6842-f83c-4cd9-a97e-38122dbdb804"),
                            Name = "Feature request",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("621ba773-f888-46f9-9b8f-12a11bfa74b0"),
                            Name = "Training",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("2cab3432-c8e3-4038-9688-b08e00f3597f"),
                            Name = "Documentation",
                            Order = 4
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a8ac7a93-d56b-48a7-a707-15a01e71b218",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32d14e8c-d66b-45a2-948d-6422546fd561",
                            Email = "DemoAdmin@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOADMIN@ADMIN.COM",
                            NormalizedUserName = "DEMO ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELhN9yw4geJmPc5X48o/ivR4o3GiBGPkYFLHEpwnSPvuppJfS8HSi9GQaIn9JFn8KQ==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Admin"
                        },
                        new
                        {
                            Id = "f6106931-07cd-43c6-94d3-f4e472b32516",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2df7975c-a40a-4dcd-b6ad-4c8b31208dc7",
                            Email = "DemoDev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMODEV@GMAIL.COM",
                            NormalizedUserName = "DEMO DEVELOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEYTESc0au0/Dk8X2U/Ve5Wu7h6RnKesDllV1UCNE14kEW+SvEJ2050Ds1R/o25CGA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo developer"
                        },
                        new
                        {
                            Id = "33a54361-bee6-4b8a-861a-c55b855f3c3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9477ad3-1350-414e-88e7-023e8e74fa21",
                            Email = "john@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "DEMO SUBMITTER",
                            PasswordHash = "AQAAAAEAACcQAAAAENrg4eBjAIKWy4VtKrTjy3sZlG0HvuTwJzAUhr0XW2+HskI3kUUN88idyZqrGjufJw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo submitter"
                        },
                        new
                        {
                            Id = "8d6a73cd-a0d2-45f7-be91-cafd4c1eac56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63e84dd8-d276-479d-90a9-793d49ed8697",
                            Email = "demoPM@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOPM@GMAIL.COM",
                            NormalizedUserName = "DEMO PROJECT MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/U3aKcZFdIAAJcrHjB17QBnqgDg+1SwmCwiBWO5jzMRHuqu5o02oQ8BtbWuSxsng==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Demo Project Manager"
                        },
                        new
                        {
                            Id = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79639346-c7c0-4a3c-bc2e-b34fc34a2a02",
                            Email = "quentin.coui@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QUENTIN.COUI@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENJjqOGv6nPwSl0cUU2yJ7xgtHB5QM18sRIF9MYDHkfcMzEzmkG/qCICuNxU8rFl4Q==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c731300-7732-49e1-bb08-3b014884c7d1",
                            Email = "john.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JOHN DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVPVIr7xvaG4/rztzgR8zD3GQ+JvotVyBBTjR+4Gn1tvinDcLVUMD3fylR8de8DYQ==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "John doe"
                        },
                        new
                        {
                            Id = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "883e4753-d72e-48a6-abed-ddc6f56ed5b0",
                            Email = "jane.doe@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@HOTMAIL.COM",
                            NormalizedUserName = "JANE DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5DY1nBDmSbIifvbRWRCHEOxQ02o3wPkXcfmkTndDkrh5Vox6dTay8sdZGnr8vsMw==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jane doe"
                        },
                        new
                        {
                            Id = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "783f5686-7795-400f-a6c0-6afc8fcd42a1",
                            Email = "jack.nicklefrost@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.NICKLEFROST@HOTMAIL.COM",
                            NormalizedUserName = "JACK NICKEFROST",
                            PasswordHash = "AQAAAAEAACcQAAAAEFz75dRo2RvFMFTYg1GHuPoXextcOAG/vtwzLU+VHH4BOOLeQoOUdlXpxHYfomWL7Q==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Jack nicklefrost"
                        },
                        new
                        {
                            Id = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99316999-f27e-475f-904d-52f7593f060b",
                            Email = "hanna.steinbeck@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANNA.STEINBECK@HOTMAIL.COM",
                            NormalizedUserName = "HANNA STEINBECK",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUFS4L2I92qYEZ9A8XSPt9lNjJllGt4uz1aJgPqwGaKTURaidWupiqzNzqsYIdNIQ==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Hanna steinbeck"
                        },
                        new
                        {
                            Id = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a815863-f723-4aa0-bad3-61e0b5627462",
                            Email = "alice.cooper@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.COOPER@HOTMAIL.COM",
                            NormalizedUserName = "ALICE COOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPaU2bjPfsb5Hyd+DICKX7ZjxUjOcKP7mcWfXWyAmD/aiRSt2gyGaSiZUQg5UBavJw==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Alice cooper"
                        },
                        new
                        {
                            Id = "df656ced-7b29-4504-baeb-60d628c56739",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01682bc7-c9d6-41be-b1f7-9ad00f248e15",
                            Email = "dean.moriarty@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEAN.MORIARTY@HOTMAIL.COM",
                            NormalizedUserName = "DEAN MORIARTY",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJ6MBeN75A+jPoXKq2V/iAu0hYUXnAZ/82BJEcq+R0pyT7txpe7DFImbFxqgxbxbA==",
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "Dean Moriarty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65",
                            ConcurrencyStamp = "40ba0a32-206f-4166-8257-ffbccbe7547a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6e8006e3-e50a-49be-94ea-03ab653713cc",
                            ConcurrencyStamp = "becc2d97-b92f-48e3-be34-a6f03654fe1d",
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "04614fbc-b0b7-4344-a2e9-8046742ac7cb",
                            ConcurrencyStamp = "bfdcd061-2428-4f54-835c-8bc0dec970dd",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "6cdee224-4d18-482a-b084-e54fa1788095",
                            ConcurrencyStamp = "41e55994-ef2e-4bdd-b019-d4dadcadf1cb",
                            Name = "Submitter",
                            NormalizedName = "SUBMITTER"
                        },
                        new
                        {
                            Id = "bf419664-2be9-46d3-8e43-58d08de78fcb",
                            ConcurrencyStamp = "011631b4-a1f2-4d48-86db-801aa1a24ae8",
                            Name = "Demo Admin",
                            NormalizedName = "DEMO_ADMIN"
                        },
                        new
                        {
                            Id = "ef5d4f99-2af2-4ab1-92ec-f1f5e02631bb",
                            ConcurrencyStamp = "bfbc4e48-7f70-4134-b779-7efbe6582446",
                            Name = " Demo Project Manager",
                            NormalizedName = "DEMO PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "e36776c8-253f-4544-874f-cd0b66d1daa2",
                            ConcurrencyStamp = "89cbc4cf-7c54-47e1-aedb-506a32bb4faf",
                            Name = "Demo Developer",
                            NormalizedName = "DEMO DEVELOPER"
                        },
                        new
                        {
                            Id = "0270ec62-5ecf-4818-8589-ebbfd0796400",
                            ConcurrencyStamp = "7bdbf042-bc84-40c4-a9a7-9b1c033d9d0e",
                            Name = "Demo Submitter",
                            NormalizedName = "DEMO SUBMITTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "21bbccc8-fc2a-4881-b746-ed9d90fbff9b",
                            RoleId = "ffd183c1-9d6f-4f65-8e4c-c08d5c6d3e65"
                        },
                        new
                        {
                            UserId = "c31a5e3d-a2ef-4065-a12c-2f9647f24070",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "355daad8-1cb5-4caa-8538-e82508b5248a",
                            RoleId = "04614fbc-b0b7-4344-a2e9-8046742ac7cb"
                        },
                        new
                        {
                            UserId = "8c66bb8b-1fc7-491b-a4ef-d8de9ecc8e63",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "68f84753-8203-45a0-ac1e-b2a06411d49a",
                            RoleId = "6e8006e3-e50a-49be-94ea-03ab653713cc"
                        },
                        new
                        {
                            UserId = "b964514f-fc0c-47f2-b16b-dfd7cbf8c167",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        },
                        new
                        {
                            UserId = "df656ced-7b29-4504-baeb-60d628c56739",
                            RoleId = "6cdee224-4d18-482a-b084-e54fa1788095"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BugTracker.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketsTeamMembers", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", "User")
                        .WithMany("TicketsTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BugTracker.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketsTeamMembers");
                });

            modelBuilder.Entity("BugTracker.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ProjectTeamMembers");

                    b.Navigation("Tickets");

                    b.Navigation("TicketsTeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
